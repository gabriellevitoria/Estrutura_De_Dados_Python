# -*- coding: utf-8 -*-
"""Lab_Recursividade_ANTES_AULA.ipynb

Automatically generated by Colaboratory.

# **Lab. Recursividade com Python**
### Objetivo específico desta aula prática
Confrontar métodos iterativos e recursivos em Python.

"""

# IDENTIFICAÇÃO
# -------------
aluno = 'Gabrielle Vitória da Silva'
print("Meu nome é:",aluno)

"""## Atividade 1
Escrever os códigos *iterativo* e *recursivo* das funções correspondentes ao problema **fatorial**.

Em seguida, testar as funções com números inteiros não-negativos.

"""

# ATIVIDADE 1
# -----------
print("Atividade 1 - FATORIAL: VERSÕES ITERATIVA E RECURSIVA")
print("-----------------------------------------------------")
print(f"Aluno: {aluno}\n")
print("Solução CARLOS !")
print("----------------\n")

# ---------------------
# definição das FUNÇÕES
# ---------------------

# 1a. fatorial - versão iterativa
# --------
def fatorial_I(n):
	f = 1
	for i in range(n,0,-1):
		f = f * i
	return f

# 1b. fatorial - versão recursiva
# --------
def fatorial_R(n):
    # caso base
    if n == 0:
        return 1
    # recursão
    else:
        valor = fatorial_R(n-1)
        valor = valor * n
        return valor
        # ou simplesmente: return n * fatorial_R(n-1)

# ---------------------------------
# definição do "PROGRAMA PRINCIPAL"
# ---------------------------------

def main():
	
	# teste dos códigos 'fatorial' com números inteiros não negativos
    n = int(input('Informe o valor de n para teste do fatorial: '))
    print('\nFatorial iterativo de %2d: ' %n,fatorial_I(n))
    print('\nFatorial recursivo de %2d: ' %n,fatorial_R(n))
    
main()

"""## Atividade 2
Escrever os códigos *iterativo* e *recursivo* das funções que permitem saber o valor, em uma posição **n**, do elemento construído de acordo com a **Regra de Fibonacci**.

Em seguida, testar as funções com números inteiros não-negativos.

Numa sequência de valores obtidos de acordo com a Regra de Fibonacci, os dois primeiros são arbitrários (isto é, podem ser quaisquer), sendo os demais definidos  a partir deles. Um exemplo é:

`fib(0): 0 # neste caso, a posição é n = 0 e o valor é fib(0) = 0`

`fib(1): 1 # neste caso, a posição é n = 1 e o valor é fib(1) = 1`

`fib(2): 1`

`fib(3): 2`

`fib(4): 3`

`fib(5): 5`

`fib(6): 8`

`fib(7): 13`

`fib(8): 21`

`fib(9): 34`

`fib(10): 55`

`...`

"""

# ATIVIDADE 2
# -----------
print("Atividade 2 - REGRA DE FIBONACCI: VERSÕES ITERATIVA E RECURSIVA")
print("---------------------------------------------------------------")
print(f"Aluno: {aluno}\n")
print("Solução CARLOS !")
print("----------------\n")

# ---------------------
# definição das FUNÇÕES
# ---------------------

# 2a. Fibonacci - versão iterativa 1
# --------
def fib_I(n):
	# assumindo que fib(0) = 0 e fib(1) = 1
	if n < 2:
		return n
		
	an_menos_1 = 1
	an_menos_2 = 0
	
	for i in range(1,n):
		elem_n = an_menos_1 + an_menos_2
		an_menos_2 = an_menos_1
		an_menos_1 = elem_n
		
	return elem_n

# 2a. Fibonacci - versão iterativa 2 (geral)
# --------
def fib_I_G(n, a = 0, b = 1):
	# assumindo que fib(0) = a e fib(1) = b
	if n == 0:
		return a
	if n == 1:
		return b
		
	#an_menos_1 = b
	#an_menos_2 = a
	
	for i in range(1,n):
		elem_n = a + b      # elem_n = an_menos_1 + an_menos_2
		a = b               # an_menos_2 = an_menos_1
		b = elem_n          # an_menos_1 = elem_n
		
	return b    # ou elem_n

# 2b. Fibonacci - versão recursiva 1
# --------
def fib_R(n):
    # caso base
    if n < 2:
        return n
    # recursão
    else:
        valor_1 = fib_R(n-1)
        valor_2 = fib_R(n-2)
        return valor_1 + valor_2
        # ou simplesmente: return fib_R(n-2) + fib_R(n-1)

# 2b. Fibonacci - versão recursiva 2 (geral)
# --------
def fib_R_G(n, a = 0, b = 1):
    # caso base
    if n == 0:
        return a
    if n == 1:
        return b
    # recursão
    else:
        valor_1 = fib_R_G(n-1)
        valor_2 = fib_R_G(n-2)
        return valor_1 + valor_2
        # ou simplesmente: return fib_R_G(n-2) + fib_R_G(n-1)

# 2b. Fibonacci - versão recursiva "em cauda" (tail recursive)
# --------
# ver código em: https://www.geeksforgeeks.org/tail-recursion-fibonacci/
# A tail recursive function to calculate n th fibonacci number


# ---------------------------------
# definição do "PROGRAMA PRINCIPAL"
# ---------------------------------

def main():
	
	# teste dos códigos 'Fibonacci' com números inteiros não negativos
    n = int(input('Informe o valor de n para teste do Fibonacci: '))
    print('\nFibonacci iterativo (1) de %2d: ' %n,fib_I(n))
    print('\nFibonacci iterativo (2) de %2d: ' %n,fib_I_G(n))
    print('\nFibonacci recursivo (1) de %2d: ' %n,fib_R(n))
    print('\nFibonacci recursivo (2) de %2d: ' %n,fib_R_G(n))
    a = 2
    b = 3
    print('\nFibonacci iterativo (2) de %2d, sendo a = %2d e b = %2d: ' %(n,a,b),fib_I_G(n,a,b))
    print('\nFibonacci recursivo (2) de %2d, sendo a = %2d e b = %2d: ' %(n,a,b),fib_I_G(n,a,b))

    
main()

"""## Atividade 3
Escrever os códigos *iterativo* e *recursivo* das funções que permitem saber o valor, em uma posição **n**, do elemento construído de acordo com uma **Progressão Aritmética (PA)** de valor inicial **a0** e razão de crescimento **r**.

Em seguida, testar as funções com números inteiros não-negativos.

No exemplo de PA abaixo, o valor inicial é **a0 = 5** e a razão de crescimento é **r = 7**.

`PA(0): 5 # neste caso, a posição é n = 0 e o valor é PA(0) = a0`

`PA(1): 12 # neste caso, a posição é n = 1 e o valor é PA(1) = a0 + (1 * r)`

`PA(2): 19`

`PA(3): 26`

`PA(4): 33`

`PA(5): 40`

`PA(6): 47`

`PA(7): 54`

`PA(8): 61`

`PA(9): 68`

`PA(10): 75`

`...`
"""

# ATIVIDADE 3
# -----------
print("Atividade 3 - PROGRESSÃO ARITMÉTICA (PA): VERSÕES ITERATIVA E RECURSIVA")
print("-----------------------------------------------------------------------")
print(f"Aluno: {aluno}\n")

"""## Atividade 4
Escrever os códigos *iterativo* e *recursivo* das funções que permitem saber o valor da *soma* dos elementos de uma **Progressão Aritmética (PA)** de valor inicial **a0** e razão de crescimento **r**, do valor **a0** até o elemento da posição **n**, inclusive.

Em seguida, testar as funções com números inteiros não-negativos.

No exemplo de PA abaixo, o valor inicial é **a0 = 5** e a razão de crescimento é **r = 7**.

`Soma_PA(0): 5 # neste caso, a posição é n = 0 e o valor é Soma_PA(0) = PA(0) = a0`

`Soma_PA(1): 17 # neste caso, a posição é n = 1 e o valor é Soma_PA(1) = PA(0) + PA(1) = a0 + ( a0 + (1 * r) )`

`Soma_PA(2): 36`

`Soma_PA(3): 62`

`Soma_PA(4): 95`

`Soma_PA(5): 135`

`Soma_PA(6): 182`

`Soma_PA(7): 236`

`Soma_PA(8): 297`

`Soma_PA(9): 365`

`Soma_PA(10): 440`

`...`
"""
#leitura dos termos por meio da inserção de dados

a = int(input('Digite o valor inicial: '))
b = int(input('Digite a razão da PA: '))
c = int(input('Digite qual termo da PA deseja: '))

#Cálculo PA Iterativa

def prog_arit_I(a, b, c):
  if b == 0:
    ab = a
  else:
    for i in range(0,b):
      ab = a + c
      a = ab
  return ab

#Cálculo PA Recursiva

def prog_arit_R(a, b, c):
  if b == 0:
    return a
  else:
    return prog_arit_R(a+c, b-1, c)
  
#Resultado

print(f"O termo {n} da PA na função iterativa é {prog_arit_I(a, b, c)}")
print(f"O termo {n} da PA na função recursiva é {prog_arit_R(a, b, c)}")

print("\n")

# ATIVIDADE 4
# -----------
print("Atividade 4 - SOMA DOS ELEMENTOS DA PA: VERSÕES ITERATIVA E RECURSIVA")
print("---------------------------------------------------------------------")
print(f"Aluno: {aluno}\n")

#Leitura dos termos por meio da inserção de dados
a = int(input('Digite o valor inicial: '))
b = int(input('Digite a razão da PA: '))
c = int(input('Digite quantos termos da PA deseja somar: '))
soma = 0

#PA Iterativa
def soma_pa_I(a, b, c, soma):
  if c == 0:
    soma = a
  else:
    for i in range(0,c+1):
      ac = a + i*b
      soma = soma + ac
  return soma


#PA Recursiva
def soma_pa_R(a, b, c, soma):
  if c == -1:
    return soma
  else:
    soma = soma + a
    return soma_pa_R(a+b, b, c-1, soma)
  
#resultados
print(f"A soma de {c} elementos da PA na função iterativa é {soma_pa_I(a, b, c, soma)}")
print(f"A soma de {c} elementos da PA na função recursiva é {soma_pa_R(a, b, c, soma)}")


"""## Desafio 1
O código abaixo contém uma versão *iterativa* da função que realiza a **busca binária** em um vetor (suposto ordenado).

No código, a função recebe um vetor-exemplo na forma de uma `list` com 16 elementos.

Escreva uma versão *recursiva* para a **busca binária**.

Em seguida, realize testes em que são buscados elementos existentes e não existentes no vetor.
"""

# DESAFIO 1
# ---------
print("Desafio 1 - BUSCA BINÁRIA EM UM VETOR ORDENADO: VERSÕES ITERATIVA E RECURSIVA")
print("-----------------------------------------------------------------------------")
print(f"Aluno: {aluno}\n")

# ---------------------
# definição das FUNÇÕES
# ---------------------

# Busca binária - versão iterativa
# Função recebe:
# - uma referência para o vetor ('list') a ser inspecionado
# - o valor da chave (conteúdo) cuja existência no vetor será verificada
# Função retorna:
# - posição em que a chave foi encontrada
# - OU -1 para indicar que a chave não está armazenada no vetor
# --------
def busca_binaria_I(vetor,chave):

	# variáveis que delimitam o espaço de busca
    esquerda = 0
    direita  = len(vetor) - 1

    #enquanto houver espaço de busca
    while ( esquerda <= direita ):

        # encontra a posição central
        meio = (esquerda+direita)//2

        # verifica conteúdo armazenado nesta posição central
        if ( vetor[meio] == chave ):
            # encontrado !
            return meio;
        # senão, se o conteúdo indica que a busca deve ser feita à esquerda...
        elif ( vetor[meio] > chave ):
            # reduz o espaço de busca, eliminando a parte à direita do 'meio'
            direita = meio - 1
        # senão (o conteúdo indica que a busca deve ser feita à esquerda...)
        else:
            # reduz o espaço de busca, eliminando a parte à esquerda do 'meio'
            esquerda = meio + 1
    
    # se está aqui, então a chave não foi encontrada !
    return -1

# Função que cria um vetor ordenado, preenchido com números aleatórios
# Recebe:
# - tamanho do vetor
# - limites inferior e superior do intervalo de números que serão armazenados
# --------
def monta_vetor(n, min, max):

    # importa métodos para geração de números aleatórios
    from random import randint

    # inicializa o vetor como uma 'list' vazia
    vetor = []

    # preenche o vetor com números aleatórios no intervalo especificado
    for i in range(0,n):
        # obtém o novo número a ser adicionado ao vetor
        novo = randint(min,max)
        # garante que ele seja "inédito" (CUIDADO: fornecer intervalo suficiente)
        while novo in vetor:
            novo = randint(min,max)
        # adiciona o novo elemento ao vetor
        vetor.append(novo)
    
    # exibe o vetor assim construído
    print("Antes de ordenar, o vetor é...")
    print(vetor)

    # ordena o vetor para permitir a busca binária
    vetor.sort()

    # exibe novamente o vetor, agora ordenado
    print("Após a ordenação, o vetor fica...")
    print(vetor)

    # retorna o vetor (referência para ele) ao programa chamador
    return vetor


# ---------------------------------
# definição do "PROGRAMA PRINCIPAL"
# ---------------------------------
def main():
	
	# construção do vetor para teste dos códigos da 'busca binária'
    vetor = monta_vetor(16,1,32)

    # teste exaustivo (retirar depois)
    #for i in range(0,16):
        #print('A busca binária ITERATIVA por %3d retornou %3d' %(vetor[i],busca_binaria_I(vetor,vetor[i])))

    # testa a busca binária ITERATIVA
    chave = int(input('\nInforme o valor do conteúdo (existente) a ser buscado no vetor: '))
    print('A busca binária ITERATIVA por %3d retornou %3d' %(chave,busca_binaria_I(vetor,chave)))

    chave = int(input('\nInforme o valor do conteúdo (inexistente) a ser buscado no vetor: '))
    print('A busca binária ITERATIVA por %3d retornou %3d' %(chave,busca_binaria_I(vetor,chave)))



# -----------------------------------
# acionamento do "PROGRAMA PRINCIPAL"
# -----------------------------------

main()

"""## Desafio 2
O código abaixo contém uma versão *iterativa* da função que realiza a **ordenação por bolha (bubble sort)** em um vetor.

No código, a função recebe um vetor-exemplo na forma de uma `list` com 16 elementos.

Escreva uma versão *recursiva* para a **ordenação por bolha** e teste o seu código.
"""

# DESAFIO 2
# ---------
print("Desafio 2 - ORDENAÇÃO DE VETOR PELO MÉTODO DA BOLHA: VERSÕES ITERATIVA E RECURSIVA")
print("----------------------------------------------------------------------------------")
print(f"Aluno: {aluno}\n")

# ---------------------
# definição das FUNÇÕES
# ---------------------

# Ordenação por bolha ('bubble sort') - versão iterativa
# Sentido do percurso: esquerda -> direita
# Função recebe uma referência para o vetor ('list') a ser inspecionado
# Função retorna a mesma referência, com o vetor agora ordenado
# --------
def bubble_sort_I(vetor):

	# variável que controla a parte já ordenada do vetor
    barra = len(vetor)
    # variável que indica se houve troca de posição entre elementos
    trocou = True

    # loop de passos (enquanto houver trocas)
    while ( trocou ):

        # supõe que neste passo ainda não houve troca
        trocou = False

        # traz a barra em uma posição
        barra -= 1

        # loop de trocas dentro do passo, até a barra
        for j in range(0,barra):

            # verifica a necessidade de troca de posições
            if vetor[j] > vetor[j+1]:
                # realiza a troca
                temp       = vetor[j]
                vetor[j]   = vetor[j+1]
                vetor[j+1] = temp
                # indica que houve troca
                trocou = True
    
    # retorna a referência para o vetor ordenado
    return vetor


# Função que cria um vetor não ordenado, preenchido com números aleatórios
# Recebe:
# - tamanho do vetor
# - limites inferior e superior do intervalo de números que serão armazenados
# --------
def monta_vetor(n, min, max):

    # importa métodos para geração de números aleatórios
    from random import randint

    # inicializa o vetor como uma 'list' vazia
    vetor = []

    # preenche o vetor com números aleatórios no intervalo especificado
    for i in range(0,n):
        # obtém o novo número a ser adicionado ao vetor
        novo = randint(min,max)
        # garante que ele seja "inédito" (CUIDADO: fornecer intervalo suficiente)
        while novo in vetor:
            novo = randint(min,max)
        # adiciona o novo elemento ao vetor
        vetor.append(novo)
    
    # retorna o vetor (referência para ele) ao programa chamador
    return vetor


# ---------------------------------
# definição do "PROGRAMA PRINCIPAL"
# ---------------------------------
def main():
	
	# construção do vetor para teste dos códigos da 'ordenação por bolha'
    vetor = monta_vetor(16,1,99)

    # exibe o vetor assim construído
    print("Antes de ordenar, o vetor é...")
    print(vetor)

    # testa a ordenação por bolha ITERATIVA
    bubble_sort_I(vetor)

    # exibe novamente o vetor, agora ordenado
    print("Após a ordenação, o vetor fica...")
    print(vetor)


# -----------------------------------
# acionamento do "PROGRAMA PRINCIPAL"
# -----------------------------------

main()