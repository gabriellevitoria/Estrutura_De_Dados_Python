# -*- coding: utf-8 -*-
"""Lab_Pilhas_Filas_ANTES_AULA.ipynb

Automatically generated by Colaboratory.

# **Lab. Pilhas e Filas a partir de `lists` Python**
### Objetivo específico desta aula prática
Apresentar a utilização do objeto **`list`** da linguagem Python para implementação de pilhas e filas.
"""

# IDENTIFICAÇÃO
# -------------
aluno = 'Gabrielle Vitória da Silva'
print("Meu nome é:",aluno)

"""
## Atividade 1
Inserir, em uma pilha, 12 elementos numéricos de modo que a 
cada quatro inserções (empilhamentos) seja realizada uma remoção (desempilhamento).

Imediatamente antes e imediatamente depois do desempilhamento, imprimir o conteúdo e
 a quantidade de elementos da pilha.

 a cada 4 tira um ou a cada 3 tira um

 usar list vazio, fazer um for range 13 e adicionar um elemento ou remover. Sempre exibindo a pilha para
   ver ela aumentando e diminuindo
"""

# ATIVIDADE 1
# -----------
print("Atividade 1 - PILHAS: OPERAÇÕES FUNDAMENTAIS")
print("--------------------------------------------")
print(f"Aluno: {aluno}\n")

#criando a pilha vazia
pilha = []

# percorrer o range de valores para testar as operações
for i in range(1,13):
    # verificando se devemos inserir o valor
    if(i%4 != 0):
        print('emplilhando o valor %d' , i)
        pilha.append(i)
    #senão é o momento de retirar o valor do topo
    else:
        print('desempilhando o valor %d'  %pilha.pop())

    #exibindo o conteúdo atual
    print(pilha)

#exibindo o conteúdo final da pilha
print('final de processo...')
print(pilha)   

print('\n')

"""
## Atividade 2
Utilize uma pilha para validar expressões algébricas (suponha que elas são escritas como cadeias de caracteres).

Um exemplo de expressão correta é: `{[(A+B)*C]-[D/(E+F)]}`.
"""

# ATIVIDADE 2
# -----------
print("Atividade 2 - VALIDAÇÃO DE EXPRESSÕES ALGÉBRICAS")
print("------------------------------------------------")
print(f"Aluno: {aluno}\n")

# casos de teste
expressao_1 = '{[(A+B)*C]+[D-(E*F)]}'     # correta
expressao_2 = '{{[(A+B)*C]+[D-(E*F)]}'    # erro 1: abriu escopo mas não o fechou
expressao_3 = '{[(A+B)*C]+[D-(E*F)]}}'    # erro 2: fechou escopo sem tê-lo aberto
expressao_4 = '{[(A+B)*C]+[D-(E*F)])'     # erro 3: caracteres de abertura e fechamento de escopo não "casam"

expressao_11 = '{ [ ( A + B ) * C ] + [ D - ( E * F ) ] }'      # correta
expressao_12 = '{ { [ ( A + B ) * C ] + [ D - ( E * F ) ] }'    # erro 1: abriu escopo mas não o fechou
expressao_13 = '{ [ ( A + B ) * C ] + [ D - ( E * F ) ] } }'    # erro 2: fechou escopo sem tê-lo aberto
expressao_14 = '{ [ ( A + B ) * C ] + [ D - ( E * F ) ] )'      # erro 3: caracteres de abertura e fechamento de escopo não "casam"


expressao = '{[(A+B)*C]+[D-(E*F)]}' #expressão a ser validada
pilha = []
for caractere in expressao:
    if caractere in '({[':
        pilha.append(caractere)
    elif caractere in ')}]':
        if not pilha:
            print('Expressão inválida!')
            break
        topo = pilha.pop()
        if(topo == '(' and caractere != ')') or \
          (topo == '{' and caractere != '}') or \
          (topo == '[' and caractere != ']'):
            print('Expressão inválida!')
            break

else: #verifica se a pilha está vazia
    if not pilha:
         print('Expressão válida')
    else:
        print('Expressão inválida!')

print('\n')

"""
## Atividade 3
Utilize uma pilha para inverter o conteúdo de um "vetor" contendo nomes de 10 elementos.
"""

# ATIVIDADE 3
# -----------
print("Atividade 3 - INVERSÃO DE 'VETOR' DE NOMES")
print("------------------------------------------")
print(f"Aluno: {aluno}\n")

nomes = ['Ana', 'Victória' , 'Beaztriz' , 'Melissa', 'Ellen', 'Ingrid', 'Rafael', 'Daniel', 'Mário', 'Roberto']
pilha = []

for nome in reversed(nomes):
    pilha.append(nome)

print(f'Vetor original:{nomes}')
print(f'Vetor invertido: {pilha}')
print('\n')

"""
## Atividade 4
Utilize uma pilha para identificar uma cadeia de caracteres que seja um *palíndromo*, 
isto é, que seja lida igualmente da esquerda para a direita e da direita para a esquerda.
"""

# ATIVIDADE 4
# -----------
print("Atividade 4 - VERIFICAÇÃO DE PALÍNDROMO")
print("---------------------------------------")
print(f"Aluno: {aluno}\n")


palavra = 'arara'
pilha = []

for letra in palavra:
    pilha.append(letra)

palavra_invertida = ''
for letra in palavra:
    palavra_invertida += pilha.pop()

if palavra == palavra_invertida:
    print(f'A palavra {palavra} é um palíndromo!')
else:
    print(f'A palavra {palavra} não é um palíndromo!')

print('\n')

"""## Atividade 5
Utilize uma pilha para verificar se uma *string* de dígitos informada é simétrica em relação ao dígito `‘0’`.

Exemplo: a *string* `“1237890987321”` é simétrica em relação ao `‘0’`, enquanto as *strings* `“3540756”` e `“285043”` não o são.

Admita que a *string* contém no máximo um dígito igual a `‘0’`.
"""

# ATIVIDADE 5
# -----------
print("Atividade 5 - VERIFICAÇÃO DE SIMETRIA")
print("-------------------------------------")
print(f"Aluno: {aluno}\n")

# casos de teste
expressao_1 = '9572418630368142759'   # simétrica em relação ao '0'
expressao_2 = '9572418630123456789'   # '0' está no centro mas não é simétrica
expressao_3 = '9572418633681427509'   # '0' não está no centro - caso 1
expressao_4 = '9572418633681427590'   # '0' não está no centro - caso 2
expressao_5 = '9057241863368142759'   # '0' não está no centro - caso 3
expressao_6 = '0957241863368142759'   # '0' não está no centro - caso 4
expressao_7 = '957241863368142759'    # '0' não existe

#Revisar essa atividade
string = '1237890987321'

class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return not self.items

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if self.is_empty():
            return None
        else:
            return self.items.pop()

def is_symmetric(string):
    stack = Stack()
    left_list = []
    found_zero = False

    for char in string:
        if char == "0":
            found_zero = True
        if found_zero:
            stack.push(char)
        else:
            left_list.append(char)

    # procura o segundo dígito '0' e começa a comparar os elementos da pilha e da lista
    for char in string[::-1]:
        if char == "0":
            break
        elif char != stack.pop():
            return False

    return True

print(is_symmetric("1237890987321")) # True

print('\n')

"""
## Atividade 6
Inserir, em uma fila, 12 elementos numéricos de modo que a cada quatro inserções (chegadas) seja realizada uma remoção (atendimento).

Imediatamente antes e imediatamente depois do atendimento, imprimir o conteúdo e a quantidade de elementos da fila.
"""

# ATIVIDADE 6
# -----------
print("Atividade 6 - FILAS: OPERAÇÕES FUNDAMENTAIS")
print("-------------------------------------------")
print(f"Aluno: {aluno}\n")

fila = [] # lista vazia para armazenar os elementos

for i in range(1, 13):
    fila.append(i) # inserção de um elemento na fila
    
    if i % 4 == 0: # a cada 4 inserções, realiza uma remoção (atendimento)
        print(f'Antes do atendimento: {fila} ({len(fila)} elementos)')
        fila.pop(0) # remove o primeiro elemento da fila (o mais antigo)
        print(f'Depois do atendimento: {fila} ({len(fila)} elementos)\n')




print('\n')

"""
## Atividade 7
Numa **fila com prioridades**, os elementos são adicionados ou retirados de acordo com uma prioridade.
Por exemplo, na seção de emergência de um hospital o atendimento ocorre com base na gravidade de cada caso, 
normalmente após uma triagem em que será atribuído a cada paciente (elemento da fila) um indicador da gravidade 
de seu caso (ou seja, da prioridade de atendimento).

A fila com prioridades pode ser implementada de duas maneiras:


1.   inserção (*enqueue*) do elemento já na posição “correta”, isto é, de acordo com a prioridade (
     neste caso, a remoção – *dequeue* – é padrão);
2.   inserção padrão e remoção com busca para encontrar o elemento mais prioritário.

Defina uma fila com prioridades que funcione da **maneira 1** e implemente as ações abaixo.



1.   Inserir na fila os seguintes itens (pares elemento-prioridade):

> Inserção 1: Cliente `'Carla'`, prioridade `30`

> Inserção 2: Cliente `'Pedro'`, prioridade `10`

> Inserção 3: Cliente `'Maria'`, prioridade `20`

> Inserção 4: Cliente `'Paola'`, prioridade `20`

> Inserção 5: Cliente `'Alexa'`, prioridade `10`

> Inserção 6: Cliente `'Mauro'`, prioridade `40`

> Inserção 7: Cliente `'Joana'`, prioridade `30`


2.   Exibir o conteúdo da fila.

Considerados os dados fornecidos, admita que a escala de prioridades é tal que `10` é o mais prioritário, enquanto `40` é o menos prioritário para atendimento.
"""

# ATIVIDADE 7
# -----------
print("Atividade 7 - FILA COM PRIORIDADES (MODO 1: INSERÇÃO COM BUSCA, REMOÇÃO NORMAL)")
print("-------------------------------------------------------------------------------")
print(f"Aluno: {aluno}\n")


fila_prioridade = []  # inicializa a lista vazia

# define a função para inserir um elemento na fila com prioridade
def enqueue(elemento, prioridade):
    for i, (_, p) in enumerate(fila_prioridade):
        if prioridade > p:
            fila_prioridade.insert(i, (elemento, prioridade))
            return
    fila_prioridade.append((elemento, prioridade))

# insere os elementos com suas respectivas prioridades na fila
enqueue('Carla', 30)
enqueue('Pedro', 10)
enqueue('Maria', 20)
enqueue('Paola', 20)
enqueue('Alexa', 10)
enqueue('Mauro', 40)
enqueue('Joana', 30)

# exibe o conteúdo da fila com prioridade
for elemento, prioridade in fila_prioridade:
    print(f'Cliente {elemento}, prioridade {prioridade}')


print('\n')



"""## Atividade 8
Defina uma fila com prioridades que funcione da **maneira 2** e implemente as mesmas ações acima indicadas.
"""

# ATIVIDADE 8
# -----------
print("Atividade 8 - FILA COM PRIORIDADES (MODO 2: INSERÇÃO NORMAL, REMOÇÃO COM BUSCA)")
print("-------------------------------------------------------------------------------")
print(f"Aluno: {aluno}\n")

fila = []  # lista vazia para armazenar os elementos e suas prioridades

# Inserção dos elementos com suas prioridades
fila.append(('Carla', 30))
fila.append(('Pedro', 10))
fila.append(('Maria', 20))
fila.append(('Paola', 20))
fila.append(('Alexa', 10))
fila.append(('Mauro', 40))
fila.append(('Joana', 30))

# Exibição do conteúdo da fila
print('Conteúdo da fila:')
for elem in fila:
    print(f'Elemento: {elem[0]} - Prioridade: {elem[1]}')

# Remoção do elemento mais prioritário
mais_prioritario = max(fila, key=lambda x: x[1])
fila.remove(mais_prioritario)
print(f'\nElemento mais prioritário removido: {mais_prioritario[0]}')



